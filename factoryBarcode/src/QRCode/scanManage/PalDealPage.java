/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PalDealPage.java
 *
 * Created on 2018-2-4, 17:12:40
 */
package QRCode.scanManage;

import QRCode.base.DataBaseUtil;
import QRCode.base.StringUtils;
import QRCode.compnents.MessageUtils;
import QRCode.deal.model.Deal;
import QRCode.deal.model.DealDetail;
import QRCode.product.model.Stock;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jiangchunyang
 */
public class PalDealPage extends javax.swing.JPanel {

    /** Creates new form PalDealPage */
    public PalDealPage() {
        initComponents();
        txtProdCode.requestFocus();
        btnSave.registerKeyboardAction(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                settleAccounts();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, InputEvent.CTRL_DOWN_MASK), JComponent.WHEN_IN_FOCUSED_WINDOW);
     
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtTotalPrice = new javax.swing.JTextField();
        txtProdCode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSinglePrice = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("交易界面"));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "商品名", "件数", "单价", "总价", "条形码", "商品主键"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName("jTable1"); // NOI18N
        jTable1.setRowHeight(28);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(4).setMinWidth(0);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(0);
        jTable1.getColumnModel().getColumn(4).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(5).setMinWidth(0);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(0);
        jTable1.getColumnModel().getColumn(5).setMaxWidth(0);

        btnSave.setText("结账");
        btnSave.setName("btnSave"); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel1.setText("合计：");
        jLabel1.setName("jLabel1"); // NOI18N

        txtTotalPrice.setEditable(false);
        txtTotalPrice.setText(" ");
        txtTotalPrice.setName("txtTotalPrice"); // NOI18N

        txtProdCode.setName("txtProdCode"); // NOI18N
        txtProdCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtProdCodeKeyReleased(evt);
            }
        });

        jLabel2.setText("当前条码：");
        jLabel2.setName("jLabel2"); // NOI18N

        txtSinglePrice.setName("txtSinglePrice"); // NOI18N
        txtSinglePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSinglePriceKeyReleased(evt);
            }
        });

        jLabel3.setText("单价：");
        jLabel3.setName("jLabel3"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel2)
                .addGap(32, 32, 32)
                .addComponent(txtProdCode, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSinglePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99))
            .addGroup(layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(493, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProdCode, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSinglePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42))))
        );
    }// </editor-fold>//GEN-END:initComponents

private void txtProdCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProdCodeKeyReleased
    if (10 == evt.getKeyCode()) {
        String txt = txtProdCode.getText();
        if (StringUtils.isNullOrEmpty(txt)) {
            return;
        }
        Stock stock = DataBaseUtil.findStockByBarCode(txtProdCode.getText());
        if (stock == null) {
            MessageUtils.showMessage("当前商品在数据库中无记录，请在右侧手动输入单价！");
            txtSinglePrice.requestFocus();
        } else {
            addStock(stock);
        }
        txtTotalPrice.setText(calTotalPrice().toString());
    }
}//GEN-LAST:event_txtProdCodeKeyReleased
    public void addStock(Stock stock) {
        BigDecimal number = BigDecimal.ZERO;
        int index = 0;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            if (jTable1.getValueAt(i, 4) != null) {
                String barcode = jTable1.getValueAt(i, 4).toString();
                if (barcode.equals(stock.getBarcode())) {
                    number = new BigDecimal(jTable1.getValueAt(i, 1).toString());
                    index = i;
                }
            }
        }
        if (number.compareTo(BigDecimal.ZERO) == 0) {
            Object[] o = new Object[]{
                stock.getName(),
                BigDecimal.ONE,
                stock.getSalePrice(),
                stock.getSalePrice().multiply(number.add(BigDecimal.ONE)),
                stock.getBarcode(),
                stock.getId()
            };
            ((DefaultTableModel) jTable1.getModel()).addRow(o);
        } else {
            BigDecimal b = number.add(BigDecimal.ONE);
            ((DefaultTableModel) jTable1.getModel()).setValueAt(b, index, 1);
            ((DefaultTableModel) jTable1.getModel()).setValueAt(b.multiply(stock.getSalePrice()), index, 3);
        }
    }

private void txtSinglePriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSinglePriceKeyReleased
    if (10 == evt.getKeyCode()) {
        String txt = txtSinglePrice.getText();
        if (StringUtils.isNullOrEmpty(txt)) {
            return;
        }
        Stock stock = new Stock();
        stock.setName("未知商品");
        stock.setRemark("【无记录商品，直接在交易界面录入】");
        stock.setSalePrice(new BigDecimal(txt));
        addStock(stock);
        txtSinglePrice.setText("");
        txtProdCode.setText("");
        txtProdCode.requestFocus();
        txtTotalPrice.setText(calTotalPrice().toString());
    }
}//GEN-LAST:event_txtSinglePriceKeyReleased

private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
    settleAccounts();
}//GEN-LAST:event_btnSaveActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtProdCode;
    private javax.swing.JTextField txtSinglePrice;
    private javax.swing.JTextField txtTotalPrice;
    // End of variables declaration//GEN-END:variables

    private BigDecimal calTotalPrice() {
        BigDecimal totalPrice = BigDecimal.ZERO;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            totalPrice = totalPrice.add(new BigDecimal(jTable1.getValueAt(i, 3).toString()));
        }

        return totalPrice;
    }

    private void settleAccounts() {
        int confir = JOptionPane.showConfirmDialog(this, "确定结账？", "确定界面", JOptionPane.CANCEL_OPTION);
        if (confir != 0) {
            return;
        }
        BigDecimal totalPrice = calTotalPrice();
        Deal deal = new Deal();
        deal.setTotalPrice(totalPrice);
        deal.setCreateTime(new Date());
        List<DealDetail> list = new ArrayList<DealDetail>();
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            DealDetail detail = new DealDetail();
            detail.setCreateTime(new Date());
            detail.setDiscount(1d);
            detail.setStockName(jTable1.getValueAt(i, 0).toString());
            detail.setNumber(Integer.valueOf(jTable1.getValueAt(i, 1).toString()));
            detail.setSinglePrice(new BigDecimal(jTable1.getValueAt(i, 2).toString()));
            detail.setTotalPrice(new BigDecimal(jTable1.getValueAt(i, 3).toString()));
            if (jTable1.getValueAt(i, 5) != null) {
                detail.setStockId(Integer.valueOf(jTable1.getValueAt(i, 5).toString()));
            }
            list.add(detail);
        }
        int result = DataBaseUtil.saveDeal(deal, list);
        if (result == list.size()) {
            MessageUtils.showMessage("保存成功！");
            resetPage();
        } else {
            MessageUtils.showErrorMessage("保存失败！", this);
        }
    }

    private void resetPage() {
        txtProdCode.setText(null);
        txtSinglePrice.setText(null);
        txtTotalPrice.setText(null);
        for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
            ((DefaultTableModel) jTable1.getModel()).removeRow(i);
        }
    }
}
